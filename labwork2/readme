При роботі над даною лабораторною роботою були використані такі паттерни як:

1. Твірні (породжувальні):

	a) Factory
	Даний паттерн визначає загальний інтерфейс для створення об'єктів у класі і дозволяє підкласам змінювати тип створюваних об'єктів. За допомогою цього паттерну у міні-програмі Book Shop класи FictionBook та NonFictionBook реалізують інтерфейс класу Book.

	b) Builder
	Цей паттерн дає можливість використовувати один і той самий код будівництва для отримання різних відображень об’єктів. Він розбиває процес конструювання об’єкта на окремі кроки. Він був використаний у міні-програмі Personal Details з методами setName, setAge і setAddress.

2. Структурний:

	Decorator
	Цей паттерн дає змогу динамічно додавати об’єктам нову функціональність. Він розміщує цільовий об’єкт у іншому об’єкті-обгортці, який запускає базову поведінку об’єкта, а потім додає до результату щось своє. Був використаний у міні-програму Personal Details для додавання нового рядка при виводі даних.

3. Поведінкові:

	a) Template Method
	Даний паттерн визначає кістяк алгоритму, перекладаючи відповідальність за деякі його кроки на підкласи. Патерн дозволяє підкласам перевизначати кроки алгоритму, не змінюючи його загальної структури. Він був застосований у міні-програмі з арифметичними операціями.

	b) Iterator
	Цей паттерн дає змогу послідовно обходити елементи складових об’єктів, не розкриваючи їхньої внутрішньої організації, шляхом винесення поведінки обходу колекції з самої колекції в окремий об’єкт. Був застосований у міні-програмі Personal Details для обходу та перегляду персональних даних.

	c) Observer
	Цей паттерн створює механізм підписки, що дає змогу одним об’єктам стежити й реагувати на події, які відбуваються в інших об’єктах. У коді показаний приклад використання паттерну.

	d) Interpreter
	Даний паттерн для заданої мови визначає представлення її граматики, а також інтерпретатор речень цієї мови. Був використаний у міні-програмі, що інтерпретує рядок у математичний вираз з арифметичними операціями додавання та віднімання.

	e) Strategy
	Цей паттерн визначає сімейство схожих алгоритмів і розміщує кожен з них у власному класі. Після цього алгоритми можна заміняти один на інший прямо під час виконання програми. Він був використаний у міні-програмі Book Shop для реалізації стратегії знижки на книжки.
